<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bookhub.bookhub_back.mapper.SalesQuantityStatisticsMapper">


<!--    2. 판매 수량 차트-->
<!--    2-1. 기간별-->
<!--    2-1-1. Daily-->
    <select id="findDailySalesQuantity" resultType="SalesQuantityStatisticsDto">
        SELECT
            DATE(co.ordered_at) AS orderedDate,
            SUM(co.customer_order_total_amount) AS totalSales
        FROM customer_orders co
        LEFT JOIN refund_orders r ON r.customer_order_id = co.customer_order_id
        WHERE YEAR(co.ordered_at) = YEAR(CURDATE())
        AND MONTH(co.ordered_at) = #{month}
        AND r.customer_order_id IS NULL
        GROUP BY orderedDate
        ORDER BY orderedDate ASC;
    </select>

<!--    2-1-2. Weekly-->
    <select id="findWeeklySalesQuantity" resultType="SalesQuantityStatisticsDto">
        SELECT
            DATE(co.ordered_at) AS orderedDate,
            SUM(co.customer_order_total_amount) AS totalSales
        FROM customer_orders co
            LEFT JOIN refund_orders r ON r.customer_order_id = co.customer_order_id
        WHERE YEAR(co.ordered_at) = #{year}
          AND MONTH(co.ordered_at) = #{month}
          AND r.customer_order_id IS NULL
        GROUP BY orderedDate
        ORDER BY orderedDate ASC;
    </select>

<!--    2-1-3. Monthly-->
    <select id="findMonthlySalesQuantity" resultType="SalesQuantityStatisticsDto">
        SELECT
            MONTH(co.ordered_at) AS orderedMonth,
            SUM(co.customer_order_total_amount) AS totalSales
        FROM customer_orders co
            LEFT JOIN refund_orders r ON r.customer_order_id = co.customer_order_id
        WHERE YEAR(co.ordered_at) = #{year}
          AND r.customer_order_id IS NULL
        GROUP BY orderedMonth
        ORDER BY orderedMonth ASC;
    </select>

<!--    2-2. 할인항목별-->
    <select id="findSalesQuantityByDiscountPolicy" resultType="SalesQuantityStatisticsDto">
        SELECT
            dp.policy_title AS policyTitle,
            COALESCE(SUM(cod.amount), 0) AS totalSales
        FROM discount_policies dp
                 LEFT JOIN customer_orders co
                    ON dp.policy_id = co.applied_policy_id
                    AND YEAR(co.ordered_at) = #{year}
            AND QUARTER(co.ordered_at) = #{quarter}
            AND NOT EXISTS (
        SELECT 1
        FROM refund_orders r
        WHERE r.customer_order_id = co.customer_order_id
            )
            LEFT JOIN customer_order_details cod
        ON cod.customer_order_id = co.customer_order_id
        GROUP BY dp.policy_title
        ORDER BY totalSales DESC;
    </select>

<!--    2-3. 지점별-->
    <select id="findSalesQuantityByBranch" resultType="SalesQuantityStatisticsDto">
        SELECT
            br.branch_name AS branchName,
            COALESCE(SUM(co.customer_order_total_amount), 0) AS totalSales
        FROM branches br
        LEFT JOIN customer_orders co
        ON co.branch_id = br.branch_id
        AND YEAR(co.ordered_at) = #{year}
        AND MONTH(co.ordered_at) = #{month}
        AND NOT EXISTS (
            SELECT 1
            FROM refund_orders r
            WHERE r.customer_order_id = co.customer_order_id
            )
        GROUP BY branchName
        ORDER BY totalSales DESC;
    </select>

<!--    2-4. 카테고리별-->
    <select id="findSalesQuantityByCategory" resultType="CategorySalesQuantityDto">
        SELECT
            COALESCE(bc_parent.category_type, bc_leaf.category_type) AS categoryType,
            COALESCE(bc_parent.category_id, bc_leaf.category_id) AS categoryId,
            COALESCE(bc_parent.category_name, bc_leaf.category_name) AS categoryName,
            COALESCE(SUM(cod.amount), 0) AS totalSales
        FROM books b
                 JOIN book_categories bc_leaf ON b.category_id = bc_leaf.category_id
                 LEFT JOIN book_categories bc_parent ON bc_leaf.parent_category_id = bc_parent.category_id
                 JOIN customer_order_details cod ON cod.book_isbn = b.book_isbn
                 JOIN customer_orders co ON co.customer_order_id = cod.customer_order_id
                 LEFT JOIN refund_orders r ON r.customer_order_id = co.customer_order_id
        WHERE co.ordered_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
          AND r.customer_order_id IS NULL
        GROUP BY
            categoryType, categoryId, categoryName
        ORDER BY totalSales DESC;
    </select>

</mapper>